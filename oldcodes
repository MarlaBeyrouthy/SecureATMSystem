# import socket
# import threading
# from database import setup_database, seed_data_from_csv ,verify_login, get_balance, update_balance, update_password, get_transactions, log_transaction
# from encryption import load_rsa_keys, decrypt_rsa, encrypt_rsa
# from cryptography.hazmat.primitives import serialization

# # Use a thread-safe lock for shared resources
# logged_in_clients_lock = threading.Lock()
# logged_in_clients = {}


# def handle_client(client_socket, private_key, public_key):
#     logged_in_clients = {}

#     try:

#  # Log public key being sent to the client
#         public_key_pem = public_key.public_bytes(
#             encoding=serialization.Encoding.PEM,
#             format=serialization.PublicFormat.SubjectPublicKeyInfo
#         )
#         print("Sending public key to client:", public_key_pem.decode())

#         client_socket.send(public_key_pem)

#         while True:
#             command = client_socket.recv(1024).decode()
#             if not command:
#                 break

#             # LOGIN Command
#             if command == "LOGIN":
#                 username = client_socket.recv(1024).decode()
#                 encrypted_password = client_socket.recv(1024)
#                 print(f"Received encrypted password from client for {username}")

#                 try:
#                     password = decrypt_rsa(private_key, encrypted_password)
#                     print(f"Decrypted password for {username}: {password}")
#                 except Exception:
#                     client_socket.send(b"FAIL")
#                     continue

#                 if verify_login(username, password):
#                     with logged_in_clients_lock:
#                         logged_in_clients[client_socket] = username
#                     client_socket.send(b"SUCCESS")
#                 else:
#                     client_socket.send(b"FAIL")

#             # Operations requiring login
#             elif command in ["BALANCE", "DEPOSIT", "WITHDRAW", "CHANGE_PASSWORD", "TRANSFER", "TRANSACTIONS"]:
#                 with logged_in_clients_lock:
#                     username = logged_in_clients.get(client_socket)
#                 if not username:
#                     client_socket.send(b"LOGIN_REQUIRED")
#                     continue

#                 if command == "BALANCE":
#                     balance = get_balance(username)
#                     encrypted_balance = encrypt_rsa(public_key, str(balance))
#                     print(f"Encrypted balance for {username}: {encrypted_balance}")
#                     client_socket.send(encrypted_balance)
#                 elif command == "DEPOSIT":
#                     try:
#                         encrypted_amount = client_socket.recv(1024)
#                         amount = float(decrypt_rsa(private_key, encrypted_amount))
#                         # Debug: Print the decrypted amount on the server terminal
#                         print(f"Decrypted deposit amount for {username}: {amount}")


#                         # Get current balance, update it, and log the transaction
#                         balance = float(get_balance(username))
#                         new_balance = balance + amount
#                         update_balance(username, new_balance)
#                         log_transaction(username, "DEPOSIT", amount)



#                         balance = float(get_balance(username))
#                         update_balance(username, balance + amount)
#                         log_transaction(username, "DEPOSIT", amount)
#                         client_socket.send(b"SUCCESS")
#                     except Exception as e:
#                         client_socket.send(b"FAIL")
        
#             elif command == "WITHDRAW":
#                     encrypted_amount = client_socket.recv(1024)  # Receive encrypted withdrawal amount
#                     amount = decrypt_rsa(private_key, encrypted_amount)  # Decrypt the amount
#                     print(f"Decrypted withdrawal amount: {amount}")
#                     balance = float(get_balance(username))
#                     if balance >= float(amount):
#                         update_balance(username, balance - float(amount))
#                         log_transaction(username, "WITHDRAW", amount)
#                         client_socket.send(b"SUCCESS")
#                     else:
#                        client_socket.send(b"INSUFFICIENT_FUNDS")

#             elif command == "CHANGE_PASSWORD":
#                     old_password_encrypted = client_socket.recv(1024)
#                     new_password_encrypted = client_socket.recv(1024)

#                     old_password = decrypt_rsa(private_key, old_password_encrypted)
#                     new_password = decrypt_rsa(private_key, new_password_encrypted)

#                     print(f"Decrypted old password: {old_password}")
#                     print(f"Decrypted new password: {new_password}")

#                     if verify_login(username, old_password):
#                         update_password(username, new_password)
#                         client_socket.send(b"SUCCESS")
#                     else:
#                         client_socket.send(b"INVALID_OLD_PASSWORD")

#             elif command == "TRANSFER":
#                     recipient = client_socket.recv(1024).decode()
#                     amount = float(client_socket.recv(1024).decode())

#                     sender_balance = float(get_balance(username))
#                     recipient_balance = float(get_balance(recipient))

#                     if sender_balance >= amount:
#                         update_balance(username, sender_balance - amount)
#                         update_balance(recipient, recipient_balance + amount)
#                         log_transaction(username, "TRANSFER", amount)
#                         client_socket.send(b"SUCCESS")
#                     else:
#                         client_socket.send(b"INSUFFICIENT_FUNDS")

#             elif command == "TRANSACTIONS":
#                     transactions = get_transactions(username)
#                     client_socket.send(str(transactions).encode())

#             elif command == "EXIT":
#                 logged_in_clients.pop(client_socket, None)
#                 client_socket.send(b"GOODBYE")
#                 break

#     finally:
#         #newS
#         logged_in_clients.pop(client_socket, None)
#         client_socket.close()

# def start_server():
#     private_key, public_key = load_rsa_keys()
#     setup_database()
#     seed_data_from_csv("users.csv")

#     server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#     server_socket.bind(("0.0.0.0", 3000))
#     server_socket.listen(5)

#     print("Server is running on port 3000...")

#     while True:
#         client_socket, _ = server_socket.accept()
#         threading.Thread(target=handle_client, args=(client_socket, private_key, public_key)).start()

# if __name__ == "__main__":
#     start_server()




//clinet
# import socket
# from encryption import load_rsa_keys, decrypt_rsa, encrypt_rsa
# from cryptography.hazmat.primitives import serialization

# def print_menu():
#     print("\nATM Simulation")
#     print("1. Login")
#     print("2. Check Balance")
#     print("3. Deposit")
#     print("4. Withdraw")
#     print("5. Change Password")
#     print("6. Transfer")
#     print("7. View Transactions")
#     print("8. Exit")

# def main():
#     private_key, public_key = load_rsa_keys()

#     client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
#     client_socket.connect(('localhost', 3000)) 
#     print("Connected to the server!")

#     logged_in = False

#     public_key_pem = client_socket.recv(1024).decode()
#     print("Received public key from server:", public_key_pem)

#     while True:
#         print_menu()
#         choice = input("Enter your choice: ")

#         if choice == "1":
#             client_socket.send(b"LOGIN")
#             username = input("Enter username: ")
#             password = input("Enter password: ")
#             encrypted_password = encrypt_rsa(public_key, password) 
#             print(f"Encrypted password for {username}: {encrypted_password}") 
#             client_socket.send(username.encode()) 
#             client_socket.send(encrypted_password) 

#             response = client_socket.recv(1024).decode()
#             if response == "SUCCESS":
#                 logged_in = True
#                 print("Login successful!")
#             else:
#                 print("Login failed!")

#         elif logged_in: 
#             if choice == "2":
#                 client_socket.send(b"BALANCE")
#                 encrypted_balance = client_socket.recv(1024)
#                 print(f"Received encrypted balance: {encrypted_balance}")
#                 balance = decrypt_rsa(private_key, encrypted_balance) 
#                 print(f"Your balance is: {balance}")

#             elif choice == "3":  
                
#                 client_socket.send(b"DEPOSIT")
#                 amount = input("Enter deposit amount: ")
#                 encrypted_amount = encrypt_rsa(public_key, amount)  # Encrypt amount
#                 print(f"Encrypted deposit amount: {encrypted_amount}")
#                 client_socket.send(amount.encode())
#                 print(client_socket.recv(1024).decode())

#             elif choice == "4": 
#                 client_socket.send(b"WITHDRAW")
#                 amount = input("Enter withdrawal amount: ")
#                 encrypted_amount = encrypt_rsa(public_key, amount)  # Encrypt amount
#                 print(f"Encrypted withdrawal amount: {encrypted_amount}")
#                 client_socket.send(amount.encode()) 
#                 print(client_socket.recv(1024).decode())

#             elif choice == "5": 
#                 client_socket.send(b"CHANGE_PASSWORD")
#                 old_password = input("Enter old password: ")
#                 new_password = input("Enter new password: ")
#                 encrypted_old = encrypt_rsa(public_key, old_password) 
#                 encrypted_new = encrypt_rsa(public_key, new_password) 
#                 print(f"Encrypted old password: {encrypted_old}")
#                 print(f"Encrypted new password: {encrypted_new}") 
#                 client_socket.send(encrypted_old)
#                 client_socket.send(encrypted_new)
#                 print(client_socket.recv(1024).decode())

#             elif choice == "6":
#                 client_socket.send(b"TRANSFER")
#                 recipient = input("Enter recipient username: ")
#                 amount = input("Enter transfer amount: ")
#                 client_socket.send(recipient.encode())  
#                 client_socket.send(amount.encode()) 
#                 print(client_socket.recv(1024).decode())

#             elif choice == "7": 
#                 client_socket.send(b"TRANSACTIONS")
#                 transactions = client_socket.recv(1024).decode()
#                 print("Transactions:")
#                 print(transactions)

#             elif choice == "8": 
#                 client_socket.send(b"EXIT")
#                 print("Goodbye!")
#                 break

#         else:
#             print("Please login first!")

#     client_socket.close()

# if __name__ == "__main__":
#     main()